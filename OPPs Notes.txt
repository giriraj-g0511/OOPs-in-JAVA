## 1)Encapsulation :
It is process of wrapping and binding attributes and behaviours of an object together. we have to make attributes or variables as private members then provide getter and setter method for each variable to read and write operations.Providing getters and setters is optional but making attributes as private is mandatory.
Encapsulation increase the security because no direct access to data variables.
By encapsulation we achieve data hiding.
	Data Hiding: Restrict direct access to that variables, and provide secured and indiret access to variables.
To achieve data hiding -> 	1) make attributes at private
					2) design getter and setter method to secured and indirect access to variables 
	so whenever we need to read that varable we have to use getter method and whenever we have to update that variable we have to use setter method.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	## 2)Relationship :
Assosiation between 2 or more objects is called as relationship.
it has 2 types.
1)Has-A Relationship
in these type the the assosiation between 2 object represent dependent relationship.
To achieve Has-A relationship one object hold the object reference variable of another object.
it has 2 types and other 2 types depends on binding.
	a)Aggregation :
It refers when object is dependent on another whether the other object not depend on another to be exist.The there is lose bonding between these two object.
Like Library has Books,Book can be exist without library but library cant exist without books
	b)Composition :
It referes when two objects are interdependent on each other or seperately they cant exist. in these there is Tigh Bonding between these two objects.
Like Home cant exist without rooms and rooms cant exist without home,if there is home then it will have rooms and if there is rooms then it will have home or home name.
	A)Early Binding:
Dependent object is created when the object of class is created.
It is done with the help of non static and static initializer and declarition statement.
Mobile Has-A Battery: when  Mobile object is created then implicitly it will create object of Battery.
	B)Lazy Binding:
Dependent object is not created when the object of class is created.
It is done with the help of methods.
Computer Has-A Pendrive: when  Computer object is created then there is no need to create object of Pendrive Whenever we want to create Pendrive object then we have to call the method to create its object.

2)Is-A Relationship / Inheritance
The relationship between two or more classes is similar parent-child relation.
We use 'extends' keyword in child class to inhert the parent class. It will inherit the static and non static members of parent class except private data members.
We cam reduce the visibility of data members but we cant increase it.
We can access the parent class attributes and behaviours using child class reference.
The parent class is loaded with the help of 'Super()' statement. It is used inside constrctor of child class. It is used the first statement inside constructor.If programmer fail to add that statement compiler will add it implicitly.
	Super(): It id used to call the parent class constructor during the object creation of child class.It helps to load non static member into child class object.It is only used inside the constructor body.
The constructor does not have the super call statement and This call statement together.If this call statement is present then compiler does not add the super call statement.
We can use the static and non static members of parent and child class with the help of child class object reference but we can access the private data members and the static and non static blocks and constructor of class.
At a time we can inherit only one class.
It has several types:
	a)Single level: In the ther will be two classes which have Is-A relationship.
	b)Multilevel: In these there will more thatn 2 classes will have Is-A relationship like a continues chain.
	c)Heirarchical: In this the the classes will have single level and multi level Is-A relationship.Or we can that is is combination of Both.In this Parent class can have 2 or more child classes.
	d)Multiple: In this the child class will inherit multiple parents, but this is not supported in java, it is supported in java.We can use interface to implement multiple inheritance.
	In java multiple inhertance of classes will leads use to diamon ambiguity problem so created of java restricted multiple inheritance with classes, enabled with interface.
		Diamond Ambiguity Problem: In these proble a child class inherits two parent classes and all these three classes(2 parent classes and 1 child class) have same method. When we call the method with the child class object reference then the compiler gets ambiguty to which method to invoke, to avoid this ambiguity we perform multiple inhertance with help of interface.
		In java toString() method present inside Object class and List Data Structure have its own toString() so at the execution time the toString() method is called according to the condition if your printing a list then it will call from List and if your printing classname with hashcode of object if you not overriden it.
	e)Hybrid : It is Combination of all above types.
Non-Primitive Type Casting: It is done whenever we have parent child relationship.It also called as deriver typecasting.
	Upcasting: it is type of non-primitive type cating in which we store child-class object reference into parent-class variable. We perform type cating to achieve generalization.
		Generalization is refers as "When two or more classes having same method with different implementation then insted of creating different classes and implementing method we create one abstract class or interface or parent class which holds the common attributes and properties of child class and child class override that attributes and properties and provide new implemetation by these we achieve polymophism,we reuse the code and consize it, it simplifies the structure of child class also it follows bottom-up approach."
		we can call the parent-class attributes and behaviours using these reference variable but we not able to call the child class because the datatype of refernece variable is parent-type.
	Downcating: for performing downcasting it is must to do upcasting. If we perform downcasting without doing upcasting then it will throw ClassCastException.
Upcasting and Downcasting comes under Non-Primitive Datatypes TypeCasting.

---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------

## 3)Polymorphism:
Poly means many and morphism means form these concept refers to behaviour with same name but its implementation must be different in all cases. 
Same work for different parameters.
it has 2 types
1)Compile Time/ Overloading
in these type compiler will decide which method to be called or invoked so it is called as compile time polymorphism
we can achieve it by several ways
	a)Constructor overloading :
We having multiple constructors with different in formal arguments but name must be same is called as constructor overloading 
Here we can also use constructor chaining, in constructor chaining in that we write constructor for different argument and first statement of its body contains call to another constructor using this keyword.
To perform constructor chaining with super then the class must have is a relation ship then child constructor have first statement which called super class constructor with some parameters
	b)Method overloading :
Writing methods which having same name but need to follow minimum one of below:
	1. different return type
	2. different datatype of formal argument
	3. different size of formal argument
any one above condition must be followed while method overloading and all method must be present in same class.
At compile time compiler will bind method call statement with method body.
	c)Method Shadowing :
For implementing these there must be is a relationship between 2 or more classes and upcasting is needed.
Method shadowing is only applicable for static method. When we create a sub class then subclass must override or provide new implementation to that static method (do not change method declaration) then in driver class when we store subclass object reference into parent type variable and we try to call parent static method which is overrided in sub class it will call parent class static method because it holding parent type reference or data type of that variable is parent-type.
	d)Variable Shadowing :
For implementing these there must be is a relationship between 2 or more classes and upcasting is needed.
In these these static and non-static variable is used it similar to method shadowing.
First do upcasting then if you call the static overriden attributes and behaviour with upcasted reference then it will execute parent class attributes and behaviour becuase the dataype of that reference variable is parent-type.
because the Parent-type variable act as class refernce to call static cotext. 

2)Run Time / Overriding
In these compiler will not decide which method to be invoke, at run time JVM will decide which method to be invoke.
It is used to when we have parent method and we have to provide new implementation to that method the we go for runtime pokymorphism.
For implementing these there must be is a relationship between 2 or more classes and upcasting is needed.
then we call the overriden method with upcasted reference then it will invoke the newly implimented method.
Note: we cant override private members.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	## 4)Abbstraction :
It means designing fprocess to display only features without implementation.
Process of hiding implementation details and only showing the features.
there 2 ways to achieve abstarction.
these both type contains abstract methods and concrete methods
Abstarct Methods: Methods without method body and prefix with 'abstract' modifier.
Concrete Methods: Methods with implementation (contains implementation of abstract methods).
1)With the help of classes
It also have 2 types of classes
a)Abstarct class: It contains abstact methods and concrete methods. If any one method is also abstract then we have to make that class as abstract class and we cant create direct object of abstract class. To create the object of abstact class it is mandatory to concrete class inherits the Abstract class.
b)Concrete class: It contains implementation to all abstact methods.It is not prefix with abstract modifier. Concrete class inherist the Abstarct class is mandatory.

In Driver class we have to create abstact class variable which going to hold the object reference of concrete class.


2)With the help of interfaces
It also same as abstraction by class but here is one exta point that we can implement multiple interfaces which supports multiple inheritance.
It also consist abstract interface which is implemented by concrete class. and all other things are simmilar to above.